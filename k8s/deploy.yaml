# 1. Ollama Deployment
# This runs the Ollama server in a pod.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ollama
  template:
    metadata:
      labels:
        app: ollama
    spec:
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434

---
# 2. Ollama Service (Internal)
# This creates a stable internal network address for the Ollama pod.
# Type: ClusterIP means it's ONLY reachable from within the Kubernetes cluster.
apiVersion: v1
kind: Service
metadata:
  name: ollama-service
spec:
  type: ClusterIP
  selector:
    app: ollama
  ports:
  - port: 11434
    targetPort: 11434

---
# 3. Open WebUI Deployment
# This runs the Open WebUI front-end.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open-webui-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: open-webui
  template:
    metadata:
      labels:
        app: open-webui
    spec:
      containers:
      - name: open-webui
        image: ghcr.io/open-webui/open-webui:main
        ports:
        - containerPort: 8080
        env:
        # THIS IS THE CRITICAL PART!
        # We tell Open WebUI where to find the Ollama service using the internal
        # Kubernetes DNS name: http://<service-name>:<service-port>
        - name: OLLAMA_BASE_URL
          value: "http://ollama-service:11434"

---
# 4. Open WebUI Service (Internal for AGIC)
# AGIC will handle external routing via Application Gateway
apiVersion: v1
kind: Service
metadata:
  name: open-webui-service
spec:
  type: ClusterIP
  selector:
    app: open-webui
  ports:
  - port: 8080 # The port AGIC will connect to
    targetPort: 8080 # The port the Open WebUI container is listening on
